/* eslint-env node, mocha */
const assert = require('assert');
const foldcase = require('.');

describe('foldcase', () => {
  describe('.full', () => {
    it('converts ASCII to lowercase', () => {
      assert.equal(
        foldcase.full('QWERTYUIOPASDFGHJKLZXCVBNM'),
        'qwertyuiopasdfghjklzxcvbnm'
      );
    });
    it('leaves lowercase and non-alphabetic ASCII unchanged', () => {
      assert.equal(
        foldcase.full('qwertyuiopasdfghjklzxcvbnm'),
        'qwertyuiopasdfghjklzxcvbnm'
      );
      assert.equal(
        foldcase.full(' 1234567890!@#$%^&*() '),
        ' 1234567890!@#$%^&*() '
      );
    });
    it('converts BMP Unicode to lowercase', () => {
      assert.equal(foldcase.full('ŒëŒíŒì'), 'Œ±Œ≤Œ≥');
    });
    it('converts single characters to multiple (German √ü)', () => {
      assert.equal(foldcase.full('Wei√ü'), 'weiss');
    });
    it('folds some Unicode scripts to uppercase (Cherokee)', () => {
      assert.equal(foldcase.full('ÍÆ≥ÍÆÉÍ≠π'), '·è£·é≥·é©');
      assert.equal(foldcase.full('·è£·é≥·é©'), '·è£·é≥·é©');
    });
    it('folds astral plane characters', () => {
      assert.equal(foldcase.full('êêÄêêÅêêÇ'), 'êê®êê©êê™');
    });
    it('leaves non-alphabetic astral plane characters unchanged', () => {
      assert.equal(foldcase.full('üôàüôâüôä'), 'üôàüôâüôä');
    });
  });
  describe('.simple', () => {
    it('converts ASCII to lowercase', () => {
      assert.equal(
        foldcase.simple('QWERTYUIOPASDFGHJKLZXCVBNM'),
        'qwertyuiopasdfghjklzxcvbnm'
      );
    });
    it('leaves lowercase and non-alphabetic ASCII unchanged', () => {
      assert.equal(
        foldcase.simple('qwertyuiopasdfghjklzxcvbnm'),
        'qwertyuiopasdfghjklzxcvbnm'
      );
      assert.equal(
        foldcase.simple(' 1234567890!@#$%^&*() '),
        ' 1234567890!@#$%^&*() '
      );
    });
    it('converts BMP Unicode to lowercase', () => {
      assert.equal(foldcase.simple('ŒëŒíŒì'), 'Œ±Œ≤Œ≥');
    });
    it('does not convert single characters to multiple (German √ü)', () => {
      assert.equal(foldcase.simple('Wei√ü'), 'wei√ü');
    });
    it('folds some Unicode scripts to uppercase (Cherokee)', () => {
      assert.equal(foldcase.simple('ÍÆ≥ÍÆÉÍ≠π'), '·è£·é≥·é©');
      assert.equal(foldcase.simple('·è£·é≥·é©'), '·è£·é≥·é©');
    });
    it('folds astral plane characters', () => {
      assert.equal(foldcase.simple('êêÄêêÅêêÇ'), 'êê®êê©êê™');
    });
    it('leaves non-alphabetic astral plane characters unchanged', () => {
      assert.equal(foldcase.simple('üôàüôâüôä'), 'üôàüôâüôä');
    });
  });
  describe('.charFull', () => {
    it('converts single characters to lowercase', () => {
      assert.equal(foldcase.charFull('X'), 'x');
      assert.equal(foldcase.charFull('Y'), 'y');
    });
    it('leaves lowercase and non-alphabetic characters unchanged', () => {
      assert.equal(foldcase.charFull('x'), 'x');
      assert.equal(foldcase.charFull('*'), '*');
    });
    it('leaves strings of length != 1 unchanged', () => {
      assert.equal(foldcase.charFull(''), '');
      assert.equal(foldcase.charFull('FOO'), 'FOO');
    });
    it('folds astral plane characters', () => {
      assert.equal(foldcase.charFull('êêÄ'), 'êê®');
    });
  });
  describe('.charSimple', () => {
    it('converts single characters to lowercase', () => {
      assert.equal(foldcase.charSimple('X'), 'x');
      assert.equal(foldcase.charSimple('Y'), 'y');
    });
    it('leaves lowercase and non-alphabetic characters unchanged', () => {
      assert.equal(foldcase.charSimple('x'), 'x');
      assert.equal(foldcase.charSimple('*'), '*');
    });
    it('leaves strings of length != 1 unchanged', () => {
      assert.equal(foldcase.charSimple(''), '');
      assert.equal(foldcase.charSimple('FOO'), 'FOO');
    });
    it('folds astral plane characters', () => {
      assert.equal(foldcase.charSimple('êêÄ'), 'êê®');
    });
  });

  it('provides foldcase.full as the default export', () => {
    assert.equal(foldcase('Wei√ü'), 'weiss');
  });
});
